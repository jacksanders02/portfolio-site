@tailwind base;
@tailwind components;
@tailwind utilities;

/* Allow classes to be used by tailwind
 * (for example, allow tha dark: prefix to select a class when dark mode is toggled)
 */

@layer utilities {
  .hover-link {
    cursor: pointer;
    transition: color 0.2s ease-in-out, stroke 0.2s ease-in-out;
    color: theme("colors.on-background.DEFAULT");
    stroke: theme("colors.on-background.DEFAULT");

    &:hover {
      @media (hover: hover) {
        color: theme("colors.on-background.hover");
        stroke: theme("colors.on-background.hover");
      }
    }

    &-dark {
      cursor: pointer;
      transition: color 0.2s ease-in-out, stroke 0.2s ease-in-out;
      color: theme("colors.on-background.dark.DEFAULT");
      stroke: theme("colors.on-background.dark.DEFAULT");

      &:hover {
        @media (hover: hover) {
          color: theme("colors.on-background.dark.hover");
          stroke: theme("colors.on-background.dark.hover");
        }
      }
    }
  }

  .inverse-hover-link {
    cursor: pointer;
    transition: color 0.2s ease-in-out, stroke 0.2s ease-in-out;
    color: theme("colors.on-background.hover");
    stroke: theme("colors.on-background.hover");

    &:hover {
      @media (hover: hover) {
        color: theme("colors.on-background.DEFAULT");
        stroke: theme("colors.on-background.DEFAULT");
      }
    }

    &-dark {
      cursor: pointer;
      transition: color 0.2s ease-in-out, stroke 0.2s ease-in-out;
      color: theme("colors.on-background.dark.hover");
      stroke: theme("colors.on-background.dark.hover");

      &:hover {
        @media (hover: hover) {
          color: theme("colors.on-background.dark.DEFAULT");
          stroke: theme("colors.on-background.dark.DEFAULT");
        }
      }
    }
  }

  .hover-button {
    border: 2px solid currentColor;
    border-radius: 0.5em;
    padding: 0.5em 0.75em;
    cursor: pointer;
    transition: color 0.2s ease-in-out;
    color: theme("colors.on-background.DEFAULT");

    &:hover {
      @media (hover: hover) {
        color: theme("colors.on-background.hover");
      }
    }

    &-dark {
      cursor: pointer;
      transition: color 0.2s ease-in-out;
      color: theme("colors.on-background.dark.DEFAULT");

      &:hover {
        @media (hover: hover) {
          color: theme("colors.on-background.dark.hover");
        }
      }
    }
  }

  .blur-1 path {
    filter: url(#blur1);
  }

  .blur-2 path {
    filter: url(#blur2);
  }

  .blur-3 path {
    filter: url(#blur3);
  }

  .blur-4 path {
    filter: url(#blur4);
  }

  .blur-5 path {
    filter: url(#blur5);
  }

  .grade-prefix:before {
    content: "Grade Achieved: ";
  }
}

.vertical-stack-children {
  display: grid;
  grid-template-columns: 1fr;

  > * {
    grid-row-start: 1;
    grid-column-start: 1;
  }
}

.tooltip {
  left: 50%;
  top: calc(100% + 12px);
  transform: translateX(-50%);
  padding: 0.25em;
  border-radius: 0.5em;
  opacity: 0;
  transition: opacity 0.5s ease;

  &:after {
    content: " ";
    position: absolute;
    right: 50%;
    transform: translateX(50%);
    top: -10px;
    border-top: none;
    border-right: 10px solid transparent;
    border-left: 10px solid transparent;
    border-bottom: 10px solid;
  }
}

.technology-icon:hover .tooltip {
  opacity: 1;
}

@keyframes slide-in {
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
  }
}

.skip-animation {
  animation-name: slide-in !important;
  animation-duration: 0s !important;
  animation-fill-mode: both !important;
}

.theme-switch {
  height: 2rem;
  aspect-ratio: 1.75;
  border-radius: 25px;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  cursor: pointer;
  padding: 0 5px;

  > div {
    height: 1.5rem;
    aspect-ratio: 1;
    border-radius: 50%;
  }

  &[data-theme="dark"] {
    justify-content: flex-end;
  }
}

svg {
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
}

body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

main {
  flex: 1 0 auto;
}
